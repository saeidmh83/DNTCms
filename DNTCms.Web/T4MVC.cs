// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    static readonly AdministratorClass s_Administrator = new AdministratorClass();
    public static AdministratorClass Administrator { get { return s_Administrator; } }
    public static DNTCms.Web.Controllers.AccountController Account = new DNTCms.Web.Controllers.T4MVC_AccountController();
    public static DNTCms.Web.Controllers.ErrorController Error = new DNTCms.Web.Controllers.T4MVC_ErrorController();
    public static DNTCms.Web.Controllers.HomeController Home = new DNTCms.Web.Controllers.T4MVC_HomeController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class AdministratorClass
    {
        public readonly string Name = "Administrator";
        public DNTCms.Web.Areas.Administrator.Controllers.ElmahController Elmah = new DNTCms.Web.Areas.Administrator.Controllers.T4MVC_ElmahController();
        public DNTCms.Web.Areas.Administrator.Controllers.HomeController Home = new DNTCms.Web.Areas.Administrator.Controllers.T4MVC_HomeController();
        public T4MVC.Administrator.SharedController Shared = new T4MVC.Administrator.SharedController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string ajax_methods_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ajax.methods.min.js") ? Url("ajax.methods.min.js") : Url("ajax.methods.js");
        public static readonly string ajax_methods_min_js = Url("ajax.methods.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap {
            private const string URLPATH = "~/Scripts/bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string affix_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/affix.min.js") ? Url("affix.min.js") : Url("affix.js");
            public static readonly string alert_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/alert.min.js") ? Url("alert.min.js") : Url("alert.js");
            public static readonly string button_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/button.min.js") ? Url("button.min.js") : Url("button.js");
            public static readonly string carousel_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/carousel.min.js") ? Url("carousel.min.js") : Url("carousel.js");
            public static readonly string collapse_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/collapse.min.js") ? Url("collapse.min.js") : Url("collapse.js");
            public static readonly string dropdown_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dropdown.min.js") ? Url("dropdown.min.js") : Url("dropdown.js");
            public static readonly string modal_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modal.min.js") ? Url("modal.min.js") : Url("modal.js");
            public static readonly string popover_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/popover.min.js") ? Url("popover.min.js") : Url("popover.js");
            public static readonly string scrollspy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrollspy.min.js") ? Url("scrollspy.min.js") : Url("scrollspy.js");
            public static readonly string tab_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tab.min.js") ? Url("tab.min.js") : Url("tab.js");
            public static readonly string tooltip_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tooltip.min.js") ? Url("tooltip.min.js") : Url("tooltip.js");
            public static readonly string transition_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/transition.min.js") ? Url("transition.min.js") : Url("transition.js");
        }
    
        public static readonly string bootstrap_sprockets_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-sprockets.min.js") ? Url("bootstrap-sprockets.min.js") : Url("bootstrap-sprockets.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class ckeditor {
            private const string URLPATH = "~/Scripts/ckeditor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class adapters {
                private const string URLPATH = "~/Scripts/ckeditor/adapters";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.min.js") ? Url("jquery.min.js") : Url("jquery.js");
            }
        
            public static readonly string build_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/build-config.min.js") ? Url("build-config.min.js") : Url("build-config.js");
            public static readonly string ckeditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ckeditor.min.js") ? Url("ckeditor.min.js") : Url("ckeditor.js");
            public static readonly string config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/config.min.js") ? Url("config.min.js") : Url("config.js");
            public static readonly string contents_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/contents.min.css") ? Url("contents.min.css") : Url("contents.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lang {
                private const string URLPATH = "~/Scripts/ckeditor/lang";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class plugins {
                private const string URLPATH = "~/Scripts/ckeditor/plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class a11yhelp {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string a11yhelp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/a11yhelp.min.js") ? Url("a11yhelp.min.js") : Url("a11yhelp.js");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class lang {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                            public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                            public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                            public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                            public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                            public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                            public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                            public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                            public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                            public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                            public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                            public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                            public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                            public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                            public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                            public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                            public static readonly string fo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fo.min.js") ? Url("fo.min.js") : Url("fo.js");
                            public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                            public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                            public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                            public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                            public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                            public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                            public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                            public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                            public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                            public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                            public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                            public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                            public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                            public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                            public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                            public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                            public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                            public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                            public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                            public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                            public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                            public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                            public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                            public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                            public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                            public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                            public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                            public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                            public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                            public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                            public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                            public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                            public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                            public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                            public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                            public static readonly string tt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tt.min.js") ? Url("tt.min.js") : Url("tt.js");
                            public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                            public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                            public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                            public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                            public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                        }
                    
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class about {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/about";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/about/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class hidpi {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/about/dialogs/hidpi";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                        }
                    
                        public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class clipboard {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/clipboard";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/clipboard/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string paste_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paste.min.js") ? Url("paste.min.js") : Url("paste.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class dialog {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/dialog";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dialogDefinition_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialogDefinition.min.js") ? Url("dialogDefinition.min.js") : Url("dialogDefinition.js");
                }
            
                public static readonly string icons_png = Url("icons.png");
                public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class image {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/image";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/image/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/image/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string noimage_png = Url("noimage.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class link {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/link";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/link/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                        public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/link/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string anchor_png = Url("anchor.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class hidpi {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/link/images/hidpi";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string anchor_png = Url("anchor.png");
                        }
                    
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class magicline {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/magicline";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/magicline/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class hidpi {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/magicline/images/hidpi";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string icon_rtl_png = Url("icon-rtl.png");
                            public static readonly string icon_png = Url("icon.png");
                        }
                    
                        public static readonly string icon_rtl_png = Url("icon-rtl.png");
                        public static readonly string icon_png = Url("icon.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class pastefromword {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/pastefromword";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class filter {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/pastefromword/filter";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class scayt {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/scayt";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/scayt/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string options_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/options.min.js") ? Url("options.min.js") : Url("options.js");
                        public static readonly string toolbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toolbar.min.css") ? Url("toolbar.min.css") : Url("toolbar.css");
                    }
                
                    public static readonly string LICENSE_md = Url("LICENSE.md");
                    public static readonly string README_md = Url("README.md");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class specialchar {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class lang {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                            public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                            public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                            public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                            public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                            public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                            public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                            public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                            public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                            public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                            public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                            public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                            public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                            public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                            public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                            public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                            public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                            public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                            public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                            public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                            public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                            public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                            public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                            public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                            public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                            public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                            public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                            public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                            public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                            public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                            public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                            public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                            public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                            public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                            public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                            public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                            public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                            public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                            public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                            public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                            public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                            public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                            public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                            public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                            public static readonly string tt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tt.min.js") ? Url("tt.min.js") : Url("tt.js");
                            public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                            public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                            public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                            public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                            public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                        }
                    
                        public static readonly string specialchar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/specialchar.min.js") ? Url("specialchar.min.js") : Url("specialchar.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class table {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/table";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/table/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string table_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.js") ? Url("table.min.js") : Url("table.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class tabletools {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/tabletools";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/tabletools/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string tableCell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tableCell.min.js") ? Url("tableCell.min.js") : Url("tableCell.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class wsc {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/wsc";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/wsc/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string ciframe_html = Url("ciframe.html");
                        public static readonly string tmpFrameset_html = Url("tmpFrameset.html");
                        public static readonly string wsc_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.css") ? Url("wsc.min.css") : Url("wsc.css");
                        public static readonly string wsc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.js") ? Url("wsc.min.js") : Url("wsc.js");
                        public static readonly string wsc_ie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc_ie.min.js") ? Url("wsc_ie.min.js") : Url("wsc_ie.js");
                    }
                
                    public static readonly string LICENSE_md = Url("LICENSE.md");
                    public static readonly string README_md = Url("README.md");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class skins {
                private const string URLPATH = "~/Scripts/ckeditor/skins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class bootstrapck {
                    private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class _temp {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/.temp";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class css {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                            public static readonly string dialog_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie.min.css") ? Url("dialog_ie.min.css") : Url("dialog_ie.css");
                            public static readonly string dialog_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie7.min.css") ? Url("dialog_ie7.min.css") : Url("dialog_ie7.css");
                            public static readonly string dialog_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie8.min.css") ? Url("dialog_ie8.min.css") : Url("dialog_ie8.css");
                            public static readonly string dialog_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_iequirks.min.css") ? Url("dialog_iequirks.min.css") : Url("dialog_iequirks.css");
                            public static readonly string dialog_opera_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_opera.min.css") ? Url("dialog_opera.min.css") : Url("dialog_opera.css");
                            public static readonly string editor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor.min.css") ? Url("editor.min.css") : Url("editor.css");
                            public static readonly string editor_gecko_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_gecko.min.css") ? Url("editor_gecko.min.css") : Url("editor_gecko.css");
                            public static readonly string editor_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie.min.css") ? Url("editor_ie.min.css") : Url("editor_ie.css");
                            public static readonly string editor_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie7.min.css") ? Url("editor_ie7.min.css") : Url("editor_ie7.css");
                            public static readonly string editor_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie8.min.css") ? Url("editor_ie8.min.css") : Url("editor_ie8.css");
                            public static readonly string editor_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_iequirks.min.css") ? Url("editor_iequirks.min.css") : Url("editor_iequirks.css");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dev {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/dev";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string icons16_svg = Url("icons16.svg");
                        public static readonly string icons32_svg = Url("icons32.svg");
                        public static readonly string locations_json = Url("locations.json");
                    }
                
                    public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                    public static readonly string dialog_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie.min.css") ? Url("dialog_ie.min.css") : Url("dialog_ie.css");
                    public static readonly string dialog_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie7.min.css") ? Url("dialog_ie7.min.css") : Url("dialog_ie7.css");
                    public static readonly string dialog_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie8.min.css") ? Url("dialog_ie8.min.css") : Url("dialog_ie8.css");
                    public static readonly string dialog_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_iequirks.min.css") ? Url("dialog_iequirks.min.css") : Url("dialog_iequirks.css");
                    public static readonly string dialog_opera_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_opera.min.css") ? Url("dialog_opera.min.css") : Url("dialog_opera.css");
                    public static readonly string editor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor.min.css") ? Url("editor.min.css") : Url("editor.css");
                    public static readonly string editor_gecko_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_gecko.min.css") ? Url("editor_gecko.min.css") : Url("editor_gecko.css");
                    public static readonly string editor_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie.min.css") ? Url("editor_ie.min.css") : Url("editor_ie.css");
                    public static readonly string editor_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie7.min.css") ? Url("editor_ie7.min.css") : Url("editor_ie7.css");
                    public static readonly string editor_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie8.min.css") ? Url("editor_ie8.min.css") : Url("editor_ie8.css");
                    public static readonly string editor_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_iequirks.min.css") ? Url("editor_iequirks.min.css") : Url("editor_iequirks.css");
                    public static readonly string icons_png = Url("icons.png");
                    public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string arrow_png = Url("arrow.png");
                        public static readonly string close_png = Url("close.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class hidpi {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/images/hidpi";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string close_png = Url("close.png");
                            public static readonly string lock_open_png = Url("lock-open.png");
                            public static readonly string lock_png = Url("lock.png");
                            public static readonly string refresh_png = Url("refresh.png");
                        }
                    
                        public static readonly string lock_open_png = Url("lock-open.png");
                        public static readonly string lock_png = Url("lock.png");
                        public static readonly string refresh_png = Url("refresh.png");
                    }
                
                    public static readonly string readme_md = Url("readme.md");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class sample {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/sample";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string bootstrapck_sample_html = Url("bootstrapck-sample.html");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class css {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/sample/css";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bootstrapck_sample_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrapck-sample.min.css") ? Url("bootstrapck-sample.min.css") : Url("bootstrapck-sample.css");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class js {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/sample/js";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string analytics_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/analytics.min.js") ? Url("analytics.min.js") : Url("analytics.js");
                            public static readonly string jquery_1_11_0_min_js = Url("jquery-1.11.0.min.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class scss {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class browser_specific {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class gecko {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/gecko";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string editor_gecko_scss = Url("editor_gecko.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class ie {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/ie";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dialog_ie_scss = Url("dialog_ie.scss");
                                public static readonly string editor_ie_scss = Url("editor_ie.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class ie7 {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/ie7";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dialog_ie7_scss = Url("dialog_ie7.scss");
                                public static readonly string editor_ie7_scss = Url("editor_ie7.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class ie8 {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/ie8";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dialog_ie8_scss = Url("dialog_ie8.scss");
                                public static readonly string editor_ie8_scss = Url("editor_ie8.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class iequirks {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/iequirks";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dialog_iequirks_scss = Url("dialog_iequirks.scss");
                                public static readonly string editor_iequirks_scss = Url("editor_iequirks.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class opera {
                                private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/browser-specific/opera";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dialog_opera_scss = Url("dialog_opera.scss");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class components {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/components";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _colorpanel_scss = Url("_colorpanel.scss");
                            public static readonly string _elementspath_scss = Url("_elementspath.scss");
                            public static readonly string _mainui_scss = Url("_mainui.scss");
                            public static readonly string _menu_scss = Url("_menu.scss");
                            public static readonly string _panel_scss = Url("_panel.scss");
                            public static readonly string _presets_scss = Url("_presets.scss");
                            public static readonly string _reset_scss = Url("_reset.scss");
                            public static readonly string _richcombo_scss = Url("_richcombo.scss");
                            public static readonly string _toolbar_scss = Url("_toolbar.scss");
                            public static readonly string editor_scss = Url("editor.scss");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class config {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/config";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _colors_scss = Url("_colors.scss");
                            public static readonly string _config_scss = Url("_config.scss");
                            public static readonly string _defaults_scss = Url("_defaults.scss");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialog {
                            private const string URLPATH = "~/Scripts/ckeditor/skins/bootstrapck/scss/dialog";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string dialog_scss = Url("dialog.scss");
                        }
                    
                    }
                
                    public static readonly string skin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin.min.js") ? Url("skin.min.js") : Url("skin.js");
                }
            
            }
        
            public static readonly string styles_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.js") ? Url("styles.min.js") : Url("styles.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Fallback {
            private const string URLPATH = "~/Scripts/Fallback";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string scripts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scripts.min.js") ? Url("scripts.min.js") : Url("scripts.js");
            public static readonly string scripts_min_js = Url("scripts.min.js");
            public static readonly string styles_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.js") ? Url("styles.min.js") : Url("styles.js");
            public static readonly string styles_min_js = Url("styles.min.js");
        }
    
        public static readonly string jquery_2_1_4_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.4.intellisense.min.js") ? Url("jquery-2.1.4.intellisense.min.js") : Url("jquery-2.1.4.intellisense.js");
        public static readonly string jquery_2_1_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.4.min.js") ? Url("jquery-2.1.4.min.js") : Url("jquery-2.1.4.js");
        public static readonly string jquery_2_1_4_min_js = Url("jquery-2.1.4.min.js");
        public static readonly string jquery_2_1_4_min_js_map = Url("jquery-2.1.4.min.js.map");
        public static readonly string jquery_ajax_querystring_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ajax.querystring.min.js") ? Url("jquery.ajax.querystring.min.js") : Url("jquery.ajax.querystring.js");
        public static readonly string jquery_ajax_querystring_min_js = Url("jquery.ajax.querystring.min.js");
        public static readonly string jquery_ajax_querystring_min_js_map = Url("jquery.ajax.querystring.min.js.map");
        public static readonly string jquery_form_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.form.config.min.js") ? Url("jquery.form.config.min.js") : Url("jquery.form.config.js");
        public static readonly string jquery_form_config_min_js = Url("jquery.form.config.min.js");
        public static readonly string jquery_form_config_min_js_map = Url("jquery.form.config.min.js.map");
        public static readonly string jquery_signalR_2_2_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-2.2.0.min.js") ? Url("jquery.signalR-2.2.0.min.js") : Url("jquery.signalR-2.2.0.js");
        public static readonly string jquery_signalR_2_2_0_min_js = Url("jquery.signalR-2.2.0.min.js");
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string jqueryval_default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jqueryval-default.min.js") ? Url("jqueryval-default.min.js") : Url("jqueryval-default.js");
        public static readonly string jqueryval_default_min_js = Url("jqueryval-default.min.js");
        public static readonly string modernizr_2_8_3_min_js = Url("modernizr-2.8.3.min.js");
        public static readonly string noty_alerts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/noty.alerts.min.js") ? Url("noty.alerts.min.js") : Url("noty.alerts.js");
        public static readonly string noty_alerts_min_js = Url("noty.alerts.min.js");
        public static readonly string noty_alerts_min_js_map = Url("noty.alerts.min.js.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Plugins {
            private const string URLPATH = "~/Scripts/Plugins";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string affix_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/affix.min.js") ? Url("affix.min.js") : Url("affix.js");
            public static readonly string affix_min_js = Url("affix.min.js");
            public static readonly string affix_min_js_map = Url("affix.min.js.map");
            public static readonly string bootstrap_datepicker_fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fa.min.js") ? Url("bootstrap-datepicker.fa.min.js") : Url("bootstrap-datepicker.fa.js");
            public static readonly string bootstrap_datepicker_fa_min_js = Url("bootstrap-datepicker.fa.min.js");
            public static readonly string bootstrap_datepicker_fa_min_js_map = Url("bootstrap-datepicker.fa.min.js.map");
            public static readonly string bootstrap_datepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.min.js") ? Url("bootstrap-datepicker.min.js") : Url("bootstrap-datepicker.js");
            public static readonly string bootstrap_datepicker_min_js = Url("bootstrap-datepicker.min.js");
            public static readonly string dropdown_hover_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dropdown-hover.min.js") ? Url("dropdown-hover.min.js") : Url("dropdown-hover.js");
            public static readonly string fileinput_min_js = Url("fileinput.min.js");
            public static readonly string jquery_ui_min_js = Url("jquery-ui.min.js");
            public static readonly string jquery_confirm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.confirm.min.js") ? Url("jquery.confirm.min.js") : Url("jquery.confirm.js");
            public static readonly string jquery_confirm_min_js = Url("jquery.confirm.min.js");
            public static readonly string jquery_confirm_min_js_map = Url("jquery.confirm.min.js.map");
            public static readonly string jquery_cookie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.min.js") ? Url("jquery.cookie.min.js") : Url("jquery.cookie.js");
            public static readonly string jquery_cookie_min_js = Url("jquery.cookie.min.js");
            public static readonly string jquery_cookie_min_js_map = Url("jquery.cookie.min.js.map");
            public static readonly string jquery_dlmenu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dlmenu.min.js") ? Url("jquery.dlmenu.min.js") : Url("jquery.dlmenu.js");
            public static readonly string jquery_dlmenu_min_js = Url("jquery.dlmenu.min.js");
            public static readonly string jquery_farsiInput_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.farsiInput.min.js") ? Url("jquery.farsiInput.min.js") : Url("jquery.farsiInput.js");
            public static readonly string jquery_farsiInput_min_js = Url("jquery.farsiInput.min.js");
            public static readonly string jquery_form_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.form.min.js") ? Url("jquery.form.min.js") : Url("jquery.form.js");
            public static readonly string jquery_form_min_js = Url("jquery.form.min.js");
            public static readonly string jquery_form_min_js_map = Url("jquery.form.min.js.map");
            public static readonly string jquery_lazyload_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.lazyload.min.js") ? Url("jquery.lazyload.min.js") : Url("jquery.lazyload.js");
            public static readonly string jquery_lazyload_min_js = Url("jquery.lazyload.min.js");
            public static readonly string jquery_mvc_asyncLoad_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.asyncLoad.min.js") ? Url("jquery.mvc.asyncLoad.min.js") : Url("jquery.mvc.asyncLoad.js");
            public static readonly string jquery_mvc_asyncLoad_min_js = Url("jquery.mvc.asyncLoad.min.js");
            public static readonly string jquery_mvc_asyncLoad_min_js_map = Url("jquery.mvc.asyncLoad.min.js.map");
            public static readonly string jquery_mvc_ban_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.ban.min.js") ? Url("jquery.mvc.ban.min.js") : Url("jquery.mvc.ban.js");
            public static readonly string jquery_mvc_ban_min_js = Url("jquery.mvc.ban.min.js");
            public static readonly string jquery_mvc_ban_min_js_map = Url("jquery.mvc.ban.min.js.map");
            public static readonly string jquery_mvc_deleteItem_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.deleteItem.min.js") ? Url("jquery.mvc.deleteItem.min.js") : Url("jquery.mvc.deleteItem.js");
            public static readonly string jquery_mvc_deleteItem_min_js = Url("jquery.mvc.deleteItem.min.js");
            public static readonly string jquery_mvc_getJson_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.getJson.min.js") ? Url("jquery.mvc.getJson.min.js") : Url("jquery.mvc.getJson.js");
            public static readonly string jquery_mvc_getJson_min_js = Url("jquery.mvc.getJson.min.js");
            public static readonly string jquery_mvc_getJson_min_js_map = Url("jquery.mvc.getJson.min.js.map");
            public static readonly string jquery_mvc_infiniteScroll_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.infiniteScroll.min.js") ? Url("jquery.mvc.infiniteScroll.min.js") : Url("jquery.mvc.infiniteScroll.js");
            public static readonly string jquery_InfiniteScroll_min_js = Url("jquery.InfiniteScroll.min.js");
            public static readonly string jquery_InfiniteScroll_min_js_map = Url("jquery.InfiniteScroll.min.js.map");
            public static readonly string jquery_mvc_modal_ajax_form_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.modal-ajax-form.min.js") ? Url("jquery.mvc.modal-ajax-form.min.js") : Url("jquery.mvc.modal-ajax-form.js");
            public static readonly string jquery_mvc_postFormAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.postFormAjax.min.js") ? Url("jquery.mvc.postFormAjax.min.js") : Url("jquery.mvc.postFormAjax.js");
            public static readonly string jquery_PostMvcFormAjax_min_js = Url("jquery.PostMvcFormAjax.min.js");
            public static readonly string jquery_PostMvcFormAjax_min_js_map = Url("jquery.PostMvcFormAjax.min.js.map");
            public static readonly string jquery_mvc_scan_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mvc.scan.min.js") ? Url("jquery.mvc.scan.min.js") : Url("jquery.mvc.scan.js");
            public static readonly string jquery_mvc_scan_min_js = Url("jquery.mvc.scan.min.js");
            public static readonly string jquery_mvc_scan_min_js_map = Url("jquery.mvc.scan.min.js.map");
            public static readonly string jquery_noty_packaged_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.noty.packaged.min.js") ? Url("jquery.noty.packaged.min.js") : Url("jquery.noty.packaged.js");
            public static readonly string jquery_noty_packaged_min_js = Url("jquery.noty.packaged.min.js");
            public static readonly string jquery_noty_packaged_min_js_map = Url("jquery.noty.packaged.min.js.map");
            public static readonly string jquery_sliderPro_min_js = Url("jquery.sliderPro.min.js");
            public static readonly string JQuerySerializeCheckbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/JQuerySerializeCheckbox.min.js") ? Url("JQuerySerializeCheckbox.min.js") : Url("JQuerySerializeCheckbox.js");
            public static readonly string json2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/json2.min.js") ? Url("json2.min.js") : Url("json2.js");
            public static readonly string json2_min_js = Url("json2.min.js");
            public static readonly string lazysizes_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lazysizes.min.js") ? Url("lazysizes.min.js") : Url("lazysizes.js");
            public static readonly string lazysizes_min_js = Url("lazysizes.min.js");
            public static readonly string masonry_pkgd_min_js = Url("masonry.pkgd.min.js");
            public static readonly string mustache_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mustache.min.js") ? Url("mustache.min.js") : Url("mustache.js");
            public static readonly string mustache_min_js = Url("mustache.min.js");
            public static readonly string mustache_min_js_map = Url("mustache.min.js.map");
            public static readonly string path_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/path.min.js") ? Url("path.min.js") : Url("path.js");
            public static readonly string path_min_js = Url("path.min.js");
            public static readonly string star_rating_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/star-rating.min.js") ? Url("star-rating.min.js") : Url("star-rating.js");
            public static readonly string star_rating_min_js = Url("star-rating.min.js");
            public static readonly string starRating_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/starRating-plugin.min.js") ? Url("starRating-plugin.min.js") : Url("starRating-plugin.js");
            public static readonly string starRating_plugin_min_js = Url("starRating-plugin.min.js");
            public static readonly string starRating_plugin_min_js_map = Url("starRating-plugin.min.js.map");
            public static readonly string tagit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tagit.min.js") ? Url("tagit.min.js") : Url("tagit.js");
            public static readonly string xeditable_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/xeditable.min.js") ? Url("xeditable.min.js") : Url("xeditable.js");
            public static readonly string xeditable_min_js = Url("xeditable.min.js");
        }
    
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        public static readonly string site_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.min.js") ? Url("site.min.js") : Url("site.js");
        public static readonly string site_min_js = Url("site.min.js");
        public static readonly string warning_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/warning.min.js") ? Url("warning.min.js") : Url("warning.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class admin {
            private const string URLPATH = "~/Content/admin";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string admin_scss = Url("admin.scss");
            public static readonly string admin_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/admin.min.css") ? Url("admin.min.css") : Url("admin.css");
            public static readonly string admin_min_css = Url("admin.min.css");
            public static readonly string animate_scss = Url("animate.scss");
            public static readonly string bench_scss = Url("bench.scss");
            public static readonly string core_scss = Url("core.scss");
            public static readonly string fonts_fa_scss = Url("fonts-fa.scss");
            public static readonly string form_scss = Url("form.scss");
            public static readonly string header_scss = Url("header.scss");
            public static readonly string index_scss = Url("index.scss");
            public static readonly string list_message_scss = Url("list-message.scss");
            public static readonly string menu_component_scss = Url("menu-component.scss");
            public static readonly string mixins_scss = Url("mixins.scss");
            public static readonly string panels_scss = Url("panels.scss");
            public static readonly string right_menu_scss = Url("right-menu.scss");
            public static readonly string rtl_scss = Url("rtl.scss");
            public static readonly string typography_scss = Url("typography.scss");
            public static readonly string variables_scss = Url("variables.scss");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootflat {
            private const string URLPATH = "~/Content/bootflat";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootflat_ {
                private const string URLPATH = "~/Content/bootflat/bootflat";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _accordion_scss = Url("_accordion.scss");
                public static readonly string _alert_scss = Url("_alert.scss");
                public static readonly string _breadcrumb_scss = Url("_breadcrumb.scss");
                public static readonly string _button_scss = Url("_button.scss");
                public static readonly string _button_group_scss = Url("_button_group.scss");
                public static readonly string _calendar_scss = Url("_calendar.scss");
                public static readonly string _checkbox_radio_scss = Url("_checkbox_radio.scss");
                public static readonly string _dropdown_scss = Url("_dropdown.scss");
                public static readonly string _footer_scss = Url("_footer.scss");
                public static readonly string _form_scss = Url("_form.scss");
                public static readonly string _global_scss = Url("_global.scss");
                public static readonly string _jumbotron_scss = Url("_jumbotron.scss");
                public static readonly string _label_badge_scss = Url("_label_badge.scss");
                public static readonly string _list_scss = Url("_list.scss");
                public static readonly string _media_list_scss = Url("_media_list.scss");
                public static readonly string _modal_scss = Url("_modal.scss");
                public static readonly string _navbar_scss = Url("_navbar.scss");
                public static readonly string _pager_scss = Url("_pager.scss");
                public static readonly string _pagination_scss = Url("_pagination.scss");
                public static readonly string _panel_scss = Url("_panel.scss");
                public static readonly string _pill_scss = Url("_pill.scss");
                public static readonly string _popover_scss = Url("_popover.scss");
                public static readonly string _pricing_scss = Url("_pricing.scss");
                public static readonly string _progress_scss = Url("_progress.scss");
                public static readonly string _selecter_scss = Url("_selecter.scss");
                public static readonly string _stepper_scss = Url("_stepper.scss");
                public static readonly string _tab_scss = Url("_tab.scss");
                public static readonly string _thumbnail_scss = Url("_thumbnail.scss");
                public static readonly string _timeline_scss = Url("_timeline.scss");
                public static readonly string _toggle_scss = Url("_toggle.scss");
                public static readonly string _tooltip_scss = Url("_tooltip.scss");
                public static readonly string _typography_scss = Url("_typography.scss");
                public static readonly string _well_scss = Url("_well.scss");
            }
        
            public static readonly string bootflat_rtl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootflat-rtl.min.css") ? Url("bootflat-rtl.min.css") : Url("bootflat-rtl.css");
            public static readonly string bootflat_scss = Url("bootflat.scss");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap {
            private const string URLPATH = "~/Content/bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _alerts_scss = Url("_alerts.scss");
            public static readonly string _badges_scss = Url("_badges.scss");
            public static readonly string _bootstrap_compass_scss = Url("_bootstrap-compass.scss");
            public static readonly string _bootstrap_mincer_scss = Url("_bootstrap-mincer.scss");
            public static readonly string _bootstrap_sprockets_scss = Url("_bootstrap-sprockets.scss");
            public static readonly string _bootstrap_scss = Url("_bootstrap.scss");
            public static readonly string _breadcrumbs_scss = Url("_breadcrumbs.scss");
            public static readonly string _button_groups_scss = Url("_button-groups.scss");
            public static readonly string _buttons_scss = Url("_buttons.scss");
            public static readonly string _carousel_scss = Url("_carousel.scss");
            public static readonly string _close_scss = Url("_close.scss");
            public static readonly string _code_scss = Url("_code.scss");
            public static readonly string _component_animations_scss = Url("_component-animations.scss");
            public static readonly string _dropdowns_scss = Url("_dropdowns.scss");
            public static readonly string _forms_scss = Url("_forms.scss");
            public static readonly string _glyphicons_scss = Url("_glyphicons.scss");
            public static readonly string _grid_scss = Url("_grid.scss");
            public static readonly string _input_groups_scss = Url("_input-groups.scss");
            public static readonly string _jumbotron_scss = Url("_jumbotron.scss");
            public static readonly string _labels_scss = Url("_labels.scss");
            public static readonly string _list_group_scss = Url("_list-group.scss");
            public static readonly string _media_scss = Url("_media.scss");
            public static readonly string _mixins_scss = Url("_mixins.scss");
            public static readonly string _modals_scss = Url("_modals.scss");
            public static readonly string _navbar_scss = Url("_navbar.scss");
            public static readonly string _navs_scss = Url("_navs.scss");
            public static readonly string _normalize_scss = Url("_normalize.scss");
            public static readonly string _pager_scss = Url("_pager.scss");
            public static readonly string _pagination_scss = Url("_pagination.scss");
            public static readonly string _panels_scss = Url("_panels.scss");
            public static readonly string _popovers_scss = Url("_popovers.scss");
            public static readonly string _print_scss = Url("_print.scss");
            public static readonly string _progress_bars_scss = Url("_progress-bars.scss");
            public static readonly string _responsive_embed_scss = Url("_responsive-embed.scss");
            public static readonly string _responsive_utilities_scss = Url("_responsive-utilities.scss");
            public static readonly string _scaffolding_scss = Url("_scaffolding.scss");
            public static readonly string _tables_scss = Url("_tables.scss");
            public static readonly string _theme_scss = Url("_theme.scss");
            public static readonly string _thumbnails_scss = Url("_thumbnails.scss");
            public static readonly string _tooltip_scss = Url("_tooltip.scss");
            public static readonly string _type_scss = Url("_type.scss");
            public static readonly string _utilities_scss = Url("_utilities.scss");
            public static readonly string _variables_scss = Url("_variables.scss");
            public static readonly string _wells_scss = Url("_wells.scss");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class mixins {
                private const string URLPATH = "~/Content/bootstrap/mixins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _alerts_scss = Url("_alerts.scss");
                public static readonly string _background_variant_scss = Url("_background-variant.scss");
                public static readonly string _border_radius_scss = Url("_border-radius.scss");
                public static readonly string _buttons_scss = Url("_buttons.scss");
                public static readonly string _center_block_scss = Url("_center-block.scss");
                public static readonly string _clearfix_scss = Url("_clearfix.scss");
                public static readonly string _forms_scss = Url("_forms.scss");
                public static readonly string _gradients_scss = Url("_gradients.scss");
                public static readonly string _grid_framework_scss = Url("_grid-framework.scss");
                public static readonly string _grid_scss = Url("_grid.scss");
                public static readonly string _hide_text_scss = Url("_hide-text.scss");
                public static readonly string _image_scss = Url("_image.scss");
                public static readonly string _labels_scss = Url("_labels.scss");
                public static readonly string _list_group_scss = Url("_list-group.scss");
                public static readonly string _nav_divider_scss = Url("_nav-divider.scss");
                public static readonly string _nav_vertical_align_scss = Url("_nav-vertical-align.scss");
                public static readonly string _opacity_scss = Url("_opacity.scss");
                public static readonly string _pagination_scss = Url("_pagination.scss");
                public static readonly string _panels_scss = Url("_panels.scss");
                public static readonly string _progress_bar_scss = Url("_progress-bar.scss");
                public static readonly string _reset_filter_scss = Url("_reset-filter.scss");
                public static readonly string _reset_text_scss = Url("_reset-text.scss");
                public static readonly string _resize_scss = Url("_resize.scss");
                public static readonly string _responsive_visibility_scss = Url("_responsive-visibility.scss");
                public static readonly string _size_scss = Url("_size.scss");
                public static readonly string _tab_focus_scss = Url("_tab-focus.scss");
                public static readonly string _table_row_scss = Url("_table-row.scss");
                public static readonly string _text_emphasis_scss = Url("_text-emphasis.scss");
                public static readonly string _text_overflow_scss = Url("_text-overflow.scss");
                public static readonly string _vendor_prefixes_scss = Url("_vendor-prefixes.scss");
            }
        
            public static readonly string site_scss = Url("site.scss");
            public static readonly string site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.min.css") ? Url("site.min.css") : Url("site.css");
            public static readonly string site_min_css = Url("site.min.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fontawesome {
            private const string URLPATH = "~/Content/fontawesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
            public static readonly string core_less = Url("core.less");
            public static readonly string extras_less = Url("extras.less");
            public static readonly string fixed_width_less = Url("fixed-width.less");
            public static readonly string font_awesome_less = Url("font-awesome.less");
            public static readonly string icons_less = Url("icons.less");
            public static readonly string larger_less = Url("larger.less");
            public static readonly string list_less = Url("list.less");
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string path_less = Url("path.less");
            public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
            public static readonly string site_less = Url("site.less");
            public static readonly string site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.min.css") ? Url("site.min.css") : Url("site.css");
            public static readonly string site_min_css = Url("site.min.css");
            public static readonly string spinning_less = Url("spinning.less");
            public static readonly string stacked_less = Url("stacked.less");
            public static readonly string variables_less = Url("variables.less");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap {
                private const string URLPATH = "~/Content/fonts/bootstrap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
                public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
                public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
                public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fontawesome {
                private const string URLPATH = "~/Content/fonts/fontawesome";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class iransans {
                private const string URLPATH = "~/Content/fonts/iransans";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string FontLicense_txt = Url("FontLicense.txt");
                public static readonly string IRAN_Sans_html = Url("IRAN Sans.html");
                public static readonly string IRANSans_Bold_web_eot = Url("IRANSans-Bold-web.eot");
                public static readonly string IRANSans_Bold_web_ttf = Url("IRANSans-Bold-web.ttf");
                public static readonly string IRANSans_Bold_web_woff = Url("IRANSans-Bold-web.woff");
                public static readonly string IRANSans_Bold_web_woff2 = Url("IRANSans-Bold-web.woff2");
                public static readonly string IRANSans_Light_web_eot = Url("IRANSans-Light-web.eot");
                public static readonly string IRANSans_Light_web_ttf = Url("IRANSans-Light-web.ttf");
                public static readonly string IRANSans_Light_web_woff = Url("IRANSans-Light-web.woff");
                public static readonly string IRANSans_Light_web_woff2 = Url("IRANSans-Light-web.woff2");
                public static readonly string IRANSans_Medium_web_eot = Url("IRANSans-Medium-web.eot");
                public static readonly string IRANSans_Medium_web_ttf = Url("IRANSans-Medium-web.ttf");
                public static readonly string IRANSans_Medium_web_woff = Url("IRANSans-Medium-web.woff");
                public static readonly string IRANSans_Medium_web_woff2 = Url("IRANSans-Medium-web.woff2");
                public static readonly string IRANSans_UltraLight_web_eot = Url("IRANSans-UltraLight-web.eot");
                public static readonly string IRANSans_UltraLight_web_ttf = Url("IRANSans-UltraLight-web.ttf");
                public static readonly string IRANSans_UltraLight_web_woff = Url("IRANSans-UltraLight-web.woff");
                public static readonly string IRANSans_UltraLight_web_woff2 = Url("IRANSans-UltraLight-web.woff2");
                public static readonly string IRANSans_web_eot = Url("IRANSans-web.eot");
                public static readonly string IRANSans_web_ttf = Url("IRANSans-web.ttf");
                public static readonly string IRANSans_web_woff = Url("IRANSans-web.woff");
                public static readonly string IRANSans_web_woff2 = Url("IRANSans-web.woff2");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class icons {
            private const string URLPATH = "~/Content/icons";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string android_chrome_144x144_png = Url("android-chrome-144x144.png");
            public static readonly string android_chrome_192x192_png = Url("android-chrome-192x192.png");
            public static readonly string android_chrome_36x36_png = Url("android-chrome-36x36.png");
            public static readonly string android_chrome_48x48_png = Url("android-chrome-48x48.png");
            public static readonly string android_chrome_72x72_png = Url("android-chrome-72x72.png");
            public static readonly string android_chrome_96x96_png = Url("android-chrome-96x96.png");
            public static readonly string apple_touch_icon_114x114_png = Url("apple-touch-icon-114x114.png");
            public static readonly string apple_touch_icon_120x120_png = Url("apple-touch-icon-120x120.png");
            public static readonly string apple_touch_icon_144x144_png = Url("apple-touch-icon-144x144.png");
            public static readonly string apple_touch_icon_152x152_png = Url("apple-touch-icon-152x152.png");
            public static readonly string apple_touch_icon_180x180_png = Url("apple-touch-icon-180x180.png");
            public static readonly string apple_touch_icon_57x57_png = Url("apple-touch-icon-57x57.png");
            public static readonly string apple_touch_icon_60x60_png = Url("apple-touch-icon-60x60.png");
            public static readonly string apple_touch_icon_72x72_png = Url("apple-touch-icon-72x72.png");
            public static readonly string apple_touch_icon_76x76_png = Url("apple-touch-icon-76x76.png");
            public static readonly string apple_touch_icon_precomposed_png = Url("apple-touch-icon-precomposed.png");
            public static readonly string apple_touch_icon_png = Url("apple-touch-icon.png");
            public static readonly string apple_touch_startup_image_1496x2048_png = Url("apple-touch-startup-image-1496x2048.png");
            public static readonly string apple_touch_startup_image_1536x2008_png = Url("apple-touch-startup-image-1536x2008.png");
            public static readonly string apple_touch_startup_image_320x460_png = Url("apple-touch-startup-image-320x460.png");
            public static readonly string apple_touch_startup_image_640x1096_png = Url("apple-touch-startup-image-640x1096.png");
            public static readonly string apple_touch_startup_image_640x920_png = Url("apple-touch-startup-image-640x920.png");
            public static readonly string apple_touch_startup_image_748x1024_png = Url("apple-touch-startup-image-748x1024.png");
            public static readonly string apple_touch_startup_image_768x1004_png = Url("apple-touch-startup-image-768x1004.png");
            public static readonly string atom_icon_48x48_png = Url("atom-icon-48x48.png");
            public static readonly string atom_logo_96x48_png = Url("atom-logo-96x48.png");
            public static readonly string favicon_16x16_png = Url("favicon-16x16.png");
            public static readonly string favicon_192x192_png = Url("favicon-192x192.png");
            public static readonly string favicon_32x32_png = Url("favicon-32x32.png");
            public static readonly string favicon_96x96_png = Url("favicon-96x96.png");
            public static readonly string mstile_144x144_png = Url("mstile-144x144.png");
            public static readonly string mstile_150x150_png = Url("mstile-150x150.png");
            public static readonly string mstile_310x150_png = Url("mstile-310x150.png");
            public static readonly string mstile_310x310_png = Url("mstile-310x310.png");
            public static readonly string mstile_70x70_png = Url("mstile-70x70.png");
            public static readonly string open_graph_1200x630_png = Url("open-graph-1200x630.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string default_avatar_png = Url("default-avatar.png");
            public static readonly string lightbulb_png = Url("lightbulb.png");
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string logo_png = Url("logo.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Overlays {
                private const string URLPATH = "~/Content/Images/Overlays";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _01_png = Url("01.png");
                public static readonly string _02_png = Url("02.png");
                public static readonly string _03_png = Url("03.png");
                public static readonly string _04_png = Url("04.png");
                public static readonly string _05_png = Url("05.png");
                public static readonly string _06_png = Url("06.png");
                public static readonly string _07_png = Url("07.png");
                public static readonly string _08_png = Url("08.png");
                public static readonly string _09_png = Url("09.png");
                public static readonly string _10_png = Url("10.png");
                public static readonly string _11_png = Url("11.png");
                public static readonly string _12_png = Url("12.png");
                public static readonly string _13_png = Url("13.png");
                public static readonly string _14_png = Url("14.png");
                public static readonly string _15_png = Url("15.png");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class modules {
            private const string URLPATH = "~/Content/modules";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class plugins {
            private const string URLPATH = "~/Content/plugins";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_datepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.min.css") ? Url("bootstrap-datepicker.min.css") : Url("bootstrap-datepicker.css");
            public static readonly string bootstrap_datepicker_min_css = Url("bootstrap-datepicker.min.css");
            public static readonly string fileinput_min_css = Url("fileinput.min.css");
            public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
            public static readonly string PagedList_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PagedList.min.css") ? Url("PagedList.min.css") : Url("PagedList.css");
            public static readonly string PagedList_min_css = Url("PagedList.min.css");
            public static readonly string slider_pro_min_css = Url("slider-pro.min.css");
            public static readonly string star_rating_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/star-rating.min.css") ? Url("star-rating.min.css") : Url("star-rating.css");
            public static readonly string star_rating_min_css = Url("star-rating.min.css");
            public static readonly string tagit_awesome_blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tagit-awesome-blue.min.css") ? Url("tagit-awesome-blue.min.css") : Url("tagit-awesome-blue.css");
            public static readonly string xeditable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/xeditable.min.css") ? Url("xeditable.min.css") : Url("xeditable.css");
            public static readonly string xeditable_min_css = Url("xeditable.min.css");
        }
    
    }

    
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        public static partial class Scripts 
        {
            public static partial class bootstrap 
            {
                public static class Assets
                {
                    public const string affix_js = "~/Scripts/bootstrap/affix.js"; 
                    public const string alert_js = "~/Scripts/bootstrap/alert.js"; 
                    public const string button_js = "~/Scripts/bootstrap/button.js"; 
                    public const string carousel_js = "~/Scripts/bootstrap/carousel.js"; 
                    public const string collapse_js = "~/Scripts/bootstrap/collapse.js"; 
                    public const string dropdown_js = "~/Scripts/bootstrap/dropdown.js"; 
                    public const string modal_js = "~/Scripts/bootstrap/modal.js"; 
                    public const string popover_js = "~/Scripts/bootstrap/popover.js"; 
                    public const string scrollspy_js = "~/Scripts/bootstrap/scrollspy.js"; 
                    public const string tab_js = "~/Scripts/bootstrap/tab.js"; 
                    public const string tooltip_js = "~/Scripts/bootstrap/tooltip.js"; 
                    public const string transition_js = "~/Scripts/bootstrap/transition.js"; 
                }
            }
            public static partial class ckeditor 
            {
                public static partial class adapters 
                {
                    public static class Assets
                    {
                        public const string jquery_js = "~/Scripts/ckeditor/adapters/jquery.js"; 
                    }
                }
                public static partial class lang 
                {
                    public static class Assets
                    {
                        public const string en_js = "~/Scripts/ckeditor/lang/en.js"; 
                        public const string fa_js = "~/Scripts/ckeditor/lang/fa.js"; 
                    }
                }
                public static partial class plugins 
                {
                    public static partial class a11yhelp 
                    {
                        public static partial class dialogs 
                        {
                            public static partial class lang 
                            {
                                public static class Assets
                                {
                                    public const string af_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/af.js"; 
                                    public const string ar_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ar.js"; 
                                    public const string bg_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/bg.js"; 
                                    public const string ca_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ca.js"; 
                                    public const string cs_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/cs.js"; 
                                    public const string cy_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/cy.js"; 
                                    public const string da_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/da.js"; 
                                    public const string de_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/de.js"; 
                                    public const string el_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/el.js"; 
                                    public const string en_gb_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/en-gb.js"; 
                                    public const string en_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/en.js"; 
                                    public const string eo_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/eo.js"; 
                                    public const string es_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/es.js"; 
                                    public const string et_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/et.js"; 
                                    public const string fa_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/fa.js"; 
                                    public const string fi_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/fi.js"; 
                                    public const string fo_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/fo.js"; 
                                    public const string fr_ca_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/fr-ca.js"; 
                                    public const string fr_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/fr.js"; 
                                    public const string gl_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/gl.js"; 
                                    public const string gu_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/gu.js"; 
                                    public const string he_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/he.js"; 
                                    public const string hi_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/hi.js"; 
                                    public const string hr_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/hr.js"; 
                                    public const string hu_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/hu.js"; 
                                    public const string id_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/id.js"; 
                                    public const string it_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/it.js"; 
                                    public const string ja_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ja.js"; 
                                    public const string km_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/km.js"; 
                                    public const string ko_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ko.js"; 
                                    public const string ku_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ku.js"; 
                                    public const string lt_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/lt.js"; 
                                    public const string lv_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/lv.js"; 
                                    public const string mk_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/mk.js"; 
                                    public const string mn_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/mn.js"; 
                                    public const string nb_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/nb.js"; 
                                    public const string nl_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/nl.js"; 
                                    public const string no_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/no.js"; 
                                    public const string pl_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/pl.js"; 
                                    public const string pt_br_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/pt-br.js"; 
                                    public const string pt_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/pt.js"; 
                                    public const string ro_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ro.js"; 
                                    public const string ru_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ru.js"; 
                                    public const string si_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/si.js"; 
                                    public const string sk_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sk.js"; 
                                    public const string sl_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sl.js"; 
                                    public const string sq_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sq.js"; 
                                    public const string sr_latn_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sr-latn.js"; 
                                    public const string sr_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sr.js"; 
                                    public const string sv_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/sv.js"; 
                                    public const string th_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/th.js"; 
                                    public const string tr_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/tr.js"; 
                                    public const string tt_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/tt.js"; 
                                    public const string ug_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/ug.js"; 
                                    public const string uk_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/uk.js"; 
                                    public const string vi_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/vi.js"; 
                                    public const string zh_cn_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/zh-cn.js"; 
                                    public const string zh_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang/zh.js"; 
                                }
                            }
                            public static class Assets
                            {
                                public const string a11yhelp_js = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/a11yhelp.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class about 
                    {
                        public static partial class dialogs 
                        {
                            public static partial class hidpi 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static class Assets
                            {
                                public const string about_js = "~/Scripts/ckeditor/plugins/about/dialogs/about.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class clipboard 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string paste_js = "~/Scripts/ckeditor/plugins/clipboard/dialogs/paste.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class dialog 
                    {
                        public static class Assets
                        {
                            public const string dialogDefinition_js = "~/Scripts/ckeditor/plugins/dialog/dialogDefinition.js"; 
                        }
                    }
                    public static partial class image 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string image_js = "~/Scripts/ckeditor/plugins/image/dialogs/image.js"; 
                            }
                        }
                        public static partial class images 
                        {
                            public static class Assets
                            {
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class link 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string anchor_js = "~/Scripts/ckeditor/plugins/link/dialogs/anchor.js"; 
                                public const string link_js = "~/Scripts/ckeditor/plugins/link/dialogs/link.js"; 
                            }
                        }
                        public static partial class images 
                        {
                            public static partial class hidpi 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class magicline 
                    {
                        public static partial class images 
                        {
                            public static partial class hidpi 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class pastefromword 
                    {
                        public static partial class filter 
                        {
                            public static class Assets
                            {
                                public const string default_js = "~/Scripts/ckeditor/plugins/pastefromword/filter/default.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class scayt 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string options_js = "~/Scripts/ckeditor/plugins/scayt/dialogs/options.js"; 
                                public const string toolbar_css = "~/Scripts/ckeditor/plugins/scayt/dialogs/toolbar.css";
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class specialchar 
                    {
                        public static partial class dialogs 
                        {
                            public static partial class lang 
                            {
                                public static class Assets
                                {
                                    public const string af_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/af.js"; 
                                    public const string ar_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ar.js"; 
                                    public const string bg_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/bg.js"; 
                                    public const string ca_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ca.js"; 
                                    public const string cs_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/cs.js"; 
                                    public const string cy_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/cy.js"; 
                                    public const string da_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/da.js"; 
                                    public const string de_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/de.js"; 
                                    public const string el_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/el.js"; 
                                    public const string en_gb_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/en-gb.js"; 
                                    public const string en_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/en.js"; 
                                    public const string eo_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/eo.js"; 
                                    public const string es_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/es.js"; 
                                    public const string et_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/et.js"; 
                                    public const string fa_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/fa.js"; 
                                    public const string fi_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/fi.js"; 
                                    public const string fr_ca_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/fr-ca.js"; 
                                    public const string fr_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/fr.js"; 
                                    public const string gl_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/gl.js"; 
                                    public const string he_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/he.js"; 
                                    public const string hr_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/hr.js"; 
                                    public const string hu_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/hu.js"; 
                                    public const string id_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/id.js"; 
                                    public const string it_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/it.js"; 
                                    public const string ja_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ja.js"; 
                                    public const string km_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/km.js"; 
                                    public const string ko_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ko.js"; 
                                    public const string ku_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ku.js"; 
                                    public const string lt_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/lt.js"; 
                                    public const string lv_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/lv.js"; 
                                    public const string nb_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/nb.js"; 
                                    public const string nl_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/nl.js"; 
                                    public const string no_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/no.js"; 
                                    public const string pl_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/pl.js"; 
                                    public const string pt_br_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/pt-br.js"; 
                                    public const string pt_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/pt.js"; 
                                    public const string ru_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ru.js"; 
                                    public const string si_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/si.js"; 
                                    public const string sk_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/sk.js"; 
                                    public const string sl_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/sl.js"; 
                                    public const string sq_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/sq.js"; 
                                    public const string sv_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/sv.js"; 
                                    public const string th_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/th.js"; 
                                    public const string tr_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/tr.js"; 
                                    public const string tt_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/tt.js"; 
                                    public const string ug_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/ug.js"; 
                                    public const string uk_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/uk.js"; 
                                    public const string vi_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/vi.js"; 
                                    public const string zh_cn_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/zh-cn.js"; 
                                    public const string zh_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang/zh.js"; 
                                }
                            }
                            public static class Assets
                            {
                                public const string specialchar_js = "~/Scripts/ckeditor/plugins/specialchar/dialogs/specialchar.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class table 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string table_js = "~/Scripts/ckeditor/plugins/table/dialogs/table.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class tabletools 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string tableCell_js = "~/Scripts/ckeditor/plugins/tabletools/dialogs/tableCell.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static partial class wsc 
                    {
                        public static partial class dialogs 
                        {
                            public static class Assets
                            {
                                public const string wsc_css = "~/Scripts/ckeditor/plugins/wsc/dialogs/wsc.css";
                                public const string wsc_js = "~/Scripts/ckeditor/plugins/wsc/dialogs/wsc.js"; 
                                public const string wsc_ie_js = "~/Scripts/ckeditor/plugins/wsc/dialogs/wsc_ie.js"; 
                            }
                        }
                        public static class Assets
                        {
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static partial class skins 
                {
                    public static partial class bootstrapck 
                    {
                        public static partial class _temp 
                        {
                            public static partial class css 
                            {
                                public static class Assets
                                {
                                    public const string dialog_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog.css";
                                    public const string dialog_ie_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog_ie.css";
                                    public const string dialog_ie7_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog_ie7.css";
                                    public const string dialog_ie8_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog_ie8.css";
                                    public const string dialog_iequirks_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog_iequirks.css";
                                    public const string dialog_opera_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/dialog_opera.css";
                                    public const string editor_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor.css";
                                    public const string editor_gecko_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor_gecko.css";
                                    public const string editor_ie_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor_ie.css";
                                    public const string editor_ie7_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor_ie7.css";
                                    public const string editor_ie8_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor_ie8.css";
                                    public const string editor_iequirks_css = "~/Scripts/ckeditor/skins/bootstrapck/.temp/css/editor_iequirks.css";
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static partial class dev 
                        {
                            public static class Assets
                            {
                            }
                        }
                        public static partial class images 
                        {
                            public static partial class hidpi 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static partial class sample 
                        {
                            public static partial class css 
                            {
                                public static class Assets
                                {
                                    public const string bootstrapck_sample_css = "~/Scripts/ckeditor/skins/bootstrapck/sample/css/bootstrapck-sample.css";
                                }
                            }
                            public static partial class js 
                            {
                                public static class Assets
                                {
                                    public const string analytics_js = "~/Scripts/ckeditor/skins/bootstrapck/sample/js/analytics.js"; 
                                    public const string jquery_1_11_0_min_js = "~/Scripts/ckeditor/skins/bootstrapck/sample/js/jquery-1.11.0.min.js"; 
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static partial class scss 
                        {
                            public static partial class browser_specific 
                            {
                                public static partial class gecko 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static partial class ie 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static partial class ie7 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static partial class ie8 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static partial class iequirks 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static partial class opera 
                                {
                                    public static class Assets
                                    {
                                    }
                                }
                                public static class Assets
                                {
                                }
                            }
                            public static partial class components 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static partial class config 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static partial class dialog 
                            {
                                public static class Assets
                                {
                                }
                            }
                            public static class Assets
                            {
                            }
                        }
                        public static class Assets
                        {
                            public const string dialog_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog.css";
                            public const string dialog_ie_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog_ie.css";
                            public const string dialog_ie7_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog_ie7.css";
                            public const string dialog_ie8_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog_ie8.css";
                            public const string dialog_iequirks_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog_iequirks.css";
                            public const string dialog_opera_css = "~/Scripts/ckeditor/skins/bootstrapck/dialog_opera.css";
                            public const string editor_css = "~/Scripts/ckeditor/skins/bootstrapck/editor.css";
                            public const string editor_gecko_css = "~/Scripts/ckeditor/skins/bootstrapck/editor_gecko.css";
                            public const string editor_ie_css = "~/Scripts/ckeditor/skins/bootstrapck/editor_ie.css";
                            public const string editor_ie7_css = "~/Scripts/ckeditor/skins/bootstrapck/editor_ie7.css";
                            public const string editor_ie8_css = "~/Scripts/ckeditor/skins/bootstrapck/editor_ie8.css";
                            public const string editor_iequirks_css = "~/Scripts/ckeditor/skins/bootstrapck/editor_iequirks.css";
                            public const string skin_js = "~/Scripts/ckeditor/skins/bootstrapck/skin.js"; 
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                    public const string build_config_js = "~/Scripts/ckeditor/build-config.js"; 
                    public const string ckeditor_js = "~/Scripts/ckeditor/ckeditor.js"; 
                    public const string config_js = "~/Scripts/ckeditor/config.js"; 
                    public const string contents_css = "~/Scripts/ckeditor/contents.css";
                    public const string styles_js = "~/Scripts/ckeditor/styles.js"; 
                }
            }
            public static partial class Fallback 
            {
                public static class Assets
                {
                    public const string scripts_js = "~/Scripts/Fallback/scripts.js"; 
                    public const string styles_js = "~/Scripts/Fallback/styles.js"; 
                }
            }
            public static partial class Plugins 
            {
                public static class Assets
                {
                    public const string affix_js = "~/Scripts/Plugins/affix.js"; 
                    public const string bootstrap_datepicker_fa_js = "~/Scripts/Plugins/bootstrap-datepicker.fa.js"; 
                    public const string bootstrap_datepicker_fa_min_js = "~/Scripts/Plugins/bootstrap-datepicker.fa.min.js"; 
                    public const string bootstrap_datepicker_js = "~/Scripts/Plugins/bootstrap-datepicker.js"; 
                    public const string bootstrap_datepicker_min_js = "~/Scripts/Plugins/bootstrap-datepicker.min.js"; 
                    public const string dropdown_hover_js = "~/Scripts/Plugins/dropdown-hover.js"; 
                    public const string fileinput_min_js = "~/Scripts/Plugins/fileinput.min.js"; 
                    public const string jquery_ui_min_js = "~/Scripts/Plugins/jquery-ui.min.js"; 
                    public const string jquery_confirm_js = "~/Scripts/Plugins/jquery.confirm.js"; 
                    public const string jquery_confirm_min_js = "~/Scripts/Plugins/jquery.confirm.min.js"; 
                    public const string jquery_cookie_js = "~/Scripts/Plugins/jquery.cookie.js"; 
                    public const string jquery_cookie_min_js = "~/Scripts/Plugins/jquery.cookie.min.js"; 
                    public const string jquery_dlmenu_js = "~/Scripts/Plugins/jquery.dlmenu.js"; 
                    public const string jquery_farsiInput_js = "~/Scripts/Plugins/jquery.farsiInput.js"; 
                    public const string jquery_form_js = "~/Scripts/Plugins/jquery.form.js"; 
                    public const string jquery_lazyload_js = "~/Scripts/Plugins/jquery.lazyload.js"; 
                    public const string jquery_lazyload_min_js = "~/Scripts/Plugins/jquery.lazyload.min.js"; 
                    public const string jquery_mvc_asyncLoad_js = "~/Scripts/Plugins/jquery.mvc.asyncLoad.js"; 
                    public const string jquery_mvc_ban_js = "~/Scripts/Plugins/jquery.mvc.ban.js"; 
                    public const string jquery_mvc_deleteItem_js = "~/Scripts/Plugins/jquery.mvc.deleteItem.js"; 
                    public const string jquery_mvc_getJson_js = "~/Scripts/Plugins/jquery.mvc.getJson.js"; 
                    public const string jquery_mvc_infiniteScroll_js = "~/Scripts/Plugins/jquery.mvc.infiniteScroll.js"; 
                    public const string jquery_mvc_modal_ajax_form_js = "~/Scripts/Plugins/jquery.mvc.modal-ajax-form.js"; 
                    public const string jquery_mvc_postFormAjax_js = "~/Scripts/Plugins/jquery.mvc.postFormAjax.js"; 
                    public const string jquery_mvc_scan_js = "~/Scripts/Plugins/jquery.mvc.scan.js"; 
                    public const string jquery_noty_packaged_js = "~/Scripts/Plugins/jquery.noty.packaged.js"; 
                    public const string jquery_noty_packaged_min_js = "~/Scripts/Plugins/jquery.noty.packaged.min.js"; 
                    public const string jquery_sliderPro_min_js = "~/Scripts/Plugins/jquery.sliderPro.min.js"; 
                    public const string JQuerySerializeCheckbox_js = "~/Scripts/Plugins/JQuerySerializeCheckbox.js"; 
                    public const string json2_js = "~/Scripts/Plugins/json2.js"; 
                    public const string json2_min_js = "~/Scripts/Plugins/json2.min.js"; 
                    public const string lazysizes_js = "~/Scripts/Plugins/lazysizes.js"; 
                    public const string lazysizes_min_js = "~/Scripts/Plugins/lazysizes.min.js"; 
                    public const string masonry_pkgd_min_js = "~/Scripts/Plugins/masonry.pkgd.min.js"; 
                    public const string mustache_js = "~/Scripts/Plugins/mustache.js"; 
                    public const string path_js = "~/Scripts/Plugins/path.js"; 
                    public const string path_min_js = "~/Scripts/Plugins/path.min.js"; 
                    public const string star_rating_js = "~/Scripts/Plugins/star-rating.js"; 
                    public const string starRating_plugin_js = "~/Scripts/Plugins/starRating-plugin.js"; 
                    public const string tagit_js = "~/Scripts/Plugins/tagit.js"; 
                    public const string xeditable_js = "~/Scripts/Plugins/xeditable.js"; 
                    public const string xeditable_min_js = "~/Scripts/Plugins/xeditable.min.js"; 
                }
            }
            public static class Assets
            {
                public const string _references_js = "~/Scripts/_references.js"; 
                public const string ajax_methods_js = "~/Scripts/ajax.methods.js"; 
                public const string bootstrap_sprockets_js = "~/Scripts/bootstrap-sprockets.js"; 
                public const string bootstrap_js = "~/Scripts/bootstrap.js"; 
                public const string bootstrap_min_js = "~/Scripts/bootstrap.min.js"; 
                public const string jquery_2_1_4_intellisense_js = "~/Scripts/jquery-2.1.4.intellisense.js"; 
                public const string jquery_2_1_4_js = "~/Scripts/jquery-2.1.4.js"; 
                public const string jquery_2_1_4_min_js = "~/Scripts/jquery-2.1.4.min.js"; 
                public const string jquery_ajax_querystring_js = "~/Scripts/jquery.ajax.querystring.js"; 
                public const string jquery_form_config_js = "~/Scripts/jquery.form.config.js"; 
                public const string jquery_signalR_2_2_0_js = "~/Scripts/jquery.signalR-2.2.0.js"; 
                public const string jquery_signalR_2_2_0_min_js = "~/Scripts/jquery.signalR-2.2.0.min.js"; 
                public const string jquery_unobtrusive_ajax_js = "~/Scripts/jquery.unobtrusive-ajax.js"; 
                public const string jquery_unobtrusive_ajax_min_js = "~/Scripts/jquery.unobtrusive-ajax.min.js"; 
                public const string jquery_validate_js = "~/Scripts/jquery.validate.js"; 
                public const string jquery_validate_min_js = "~/Scripts/jquery.validate.min.js"; 
                public const string jquery_validate_unobtrusive_js = "~/Scripts/jquery.validate.unobtrusive.js"; 
                public const string jquery_validate_unobtrusive_min_js = "~/Scripts/jquery.validate.unobtrusive.min.js"; 
                public const string jqueryval_default_js = "~/Scripts/jqueryval-default.js"; 
                public const string modernizr_2_8_3_min_js = "~/Scripts/modernizr-2.8.3.min.js"; 
                public const string noty_alerts_js = "~/Scripts/noty.alerts.js"; 
                public const string respond_js = "~/Scripts/respond.js"; 
                public const string respond_min_js = "~/Scripts/respond.min.js"; 
                public const string site_js = "~/Scripts/site.js"; 
                public const string warning_js = "~/Scripts/warning.js"; 
            }
        }
        public static partial class Content 
        {
            public static partial class admin 
            {
                public static class Assets
                {
                }
            }
            public static partial class bootflat 
            {
                public static partial class bootflat_ 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                    public const string bootflat_rtl_css = "~/Content/bootflat/bootflat-rtl.css";
                }
            }
            public static partial class bootstrap 
            {
                public static partial class mixins 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class fontawesome 
            {
                public static class Assets
                {
                }
            }
            public static partial class fonts 
            {
                public static partial class bootstrap 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class fontawesome 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class iransans 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class icons 
            {
                public static class Assets
                {
                }
            }
            public static partial class Images 
            {
                public static partial class Overlays 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class modules 
            {
                public static class Assets
                {
                }
            }
            public static partial class plugins 
            {
                public static class Assets
                {
                    public const string bootstrap_datepicker_css = "~/Content/plugins/bootstrap-datepicker.css";
                    public const string bootstrap_datepicker_min_css = "~/Content/plugins/bootstrap-datepicker.min.css";
                    public const string fileinput_min_css = "~/Content/plugins/fileinput.min.css";
                    public const string jquery_ui_min_css = "~/Content/plugins/jquery-ui.min.css";
                    public const string PagedList_css = "~/Content/plugins/PagedList.css";
                    public const string PagedList_min_css = "~/Content/plugins/PagedList.min.css";
                    public const string slider_pro_min_css = "~/Content/plugins/slider-pro.min.css";
                    public const string star_rating_css = "~/Content/plugins/star-rating.css";
                    public const string star_rating_min_css = "~/Content/plugins/star-rating.min.css";
                    public const string tagit_awesome_blue_css = "~/Content/plugins/tagit-awesome-blue.css";
                    public const string xeditable_css = "~/Content/plugins/xeditable.css";
                    public const string xeditable_min_css = "~/Content/plugins/xeditable.min.css";
                }
            }
            public static class Assets
            {
            }
        }
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114


